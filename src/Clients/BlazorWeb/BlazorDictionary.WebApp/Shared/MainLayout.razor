@inherits LayoutComponentBase

<div class="navbar fixed-top text-white">
    <div class="logo">
        <a href="/" class="bg-white">
            <img height="29" src="" alt="Logo" />
        </a>
    </div>
    <div class="search-box">
        <div class="input-group">
            <div class="form-outline">
                <input type="search" class="form-control small" @bind-value="@_searchText" @bind-value:event="oninput" @onkeypress="@SearchKeyDown" @onfocusout="OnSearchFocusOut" placeholder="Search in Dictionary" />
            </div>
            <button type="button" class="btn btn-dictionary btn-success" @onclick="@Search" @onfocusout="@OnSearchFocusOut">
                <i class="fa fa-search h-75"></i>
            </button>
        </div>

        @if (_showSearchResult)
        {
            <ul class="list-group">
                @foreach (var searchItem in _searchResults)
                {
                    <li class="list-group-item">
                        <a @onclick="(async () => await GoEntry(searchItem.Id))">
                            @searchItem.Subject
                        </a>
                    </li>
                }
            </ul>
        }
    </div>

   <AuthorizeView>
        <Authorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-dictionary w-auto" value="Create Entry" @onclick="@NavigateCreateEntryPage" />
                <input type="button" class="form-control btn-success btn-dictionary w-auto" value="ME" @onclick="@NavigateMePage" />
                <input type="button" class="form-control btn-success btn-dictionary w-auto" value="Logout" @onclick="@NavigateLogoutPage" />
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-dictionary w-auto" value="Login" @onclick="@NavigateLoginPage" />
            </div>
       </NotAuthorized>
    </AuthorizeView>

    <div class="sub-nav">
        <a class="sub-nav-item active">bugün</a>
        <a class="sub-nav-item">gündem</a>
        <a class="sub-nav-item">debe</a>
        <a class="sub-nav-item">sorunsallar</a>
        <a class="sub-nav-item">takip</a>
        <a class="sub-nav-item">son</a>
        <a class="sub-nav-item">kenar</a>
        <a class="sub-nav-item">çaylaklar</a>
    </div>
</div>

<div class="page">
    <div class="sidebar">
        <h5 class="text-white text-center sidebar-heading">
            @EntriesSubject
        </h5>
        <a class="show-more" @onclick="@RefreshEntries">Refresh</a>
        <ul class="list-group">
            <li>
                <EntriesComponent @ref="@_entriesComponent" />
            </li>
        </ul>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private EntriesComponent _entriesComponent;
    private string _searchText;
    private bool _showSearchResult;
    private List<SearchEntryViewModel> _searchResults = new();

    public string EntriesSubject { get; set; } = "bugün";

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    IEntryService EntryService { get; set; }

    private async Task RefreshEntries()
    {
        await _entriesComponent.RefreshList();
    }

    private void NavigateMePage()
    {
        NavigationManager.NavigateTo("/me");
    }

    private void NavigateLoginPage()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        NavigationManager.NavigateTo("/logout");
    }

    private void NavigateCreateEntryPage()
    {
        NavigationManager.NavigateTo("/createEntry");
    }

    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();            
        }
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100);

        if (_showSearchResult)
        {
            _showSearchResult = false;
        }
    }

    private async Task Search()
    {
        if (string.IsNullOrEmpty(_searchText))
        {
            return;
        }

        _searchResults = await EntryService.SearchBySubject(_searchText);

        _showSearchResult = true;

        _searchText = string.Empty;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();

        NavigationManager.NavigateTo($"/entry/{entryId}");
    }
}
