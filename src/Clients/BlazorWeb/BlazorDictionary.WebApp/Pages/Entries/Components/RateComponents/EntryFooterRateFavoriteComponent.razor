@using Blazored.LocalStorage
<div class="container">
    <span>
        <a class="p-1" title="Up Vote!">
            <span class="oi oi-arrow-top entry-vote @(VoteType == VoteType.UpVote ? "text-success": "text-secondary")"
                @onclick="(() => UpClicked())"></span>
        </a>
        <a class="p-3" title="Down Vote!">
            <span
                class="oi oi-arrow-bottom entry-vote @(VoteType == VoteType.DownVote ? "text-danger" : "text-secondary")"
                @onclick="(() => DownClicked())"></span>
        </a>
        <EntryFooterFavoriteComponent EntryId="@EntryId" FavoritedCount="@FavoritedCount" IsFavorited="@IsFavorited"
            OnFavClicked="@FavoritedClicked" />
    </span>
</div>

@code {
    [Inject]
    ISyncLocalStorageService SyncLocalStorageService { get; set; }

    [Parameter]
    public VoteType VoteType { get; set; }

    [Parameter]
    public EventCallback<FavClickedEventArgs> OnFavClicked { get; set; }

    [Parameter]
    public EventCallback<VoteClickedEventArgs> OnVoteClicked { get; set; }

    [Parameter]
    public bool IsFavorited { get; set; }

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public int FavoritedCount { get; set; }

    private async Task FavoritedClicked()
    {
        var eventArgs = new FavClickedEventArgs();
        eventArgs.EntryId = EntryId.Value;
        eventArgs.IsFaved = !IsFavorited;

        await OnFavClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }

    private async Task DownClicked()
    {
        var eventArgs = new VoteClickedEventArgs();
        eventArgs.EntryId = EntryId.Value;
        eventArgs.DownVoteDeleted = VoteType == VoteType.DownVote;
        eventArgs.IsDownVoteClicked = true;

        await OnVoteClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }

    private async Task UpClicked(){
        var eventArgs = new VoteClickedEventArgs();
        eventArgs.EntryId = EntryId.Value;
        eventArgs.UpVoteDeleted = VoteType == VoteType.UpVote;
        eventArgs.IsUpVoteClicked = true;

        await OnVoteClicked.InvokeAsync(eventArgs);

        StateHasChanged();
    }
}